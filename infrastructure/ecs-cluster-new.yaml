Description: ECS cluster with Auto Scaling Group

Parameters:
  EnvironmentName:
    Description: An environment name (prefixed to resource names)
    Type: String

  InstanceType:
    Description: Instance type to build the ECS cluster
    Type: String
    Default: t2.micro

  ClusterSize:
    Description: How many ECS hosts do you want to initially deploy?
    Type: Number
    Default: 2

  VPC:
    Description: VPC for ECS cluster
    Type: AWS::EC2::VPC::Id

  Subnets:
    Description: Subnets for ECS cluster
    Type: List<AWS::EC2::Subnet::Id>

  LoadBalancerSecurityGroup:
    Description: Select the Security Group to apply to the Application Load Balancer
    Type: AWS::EC2::SecurityGroup::Id

  KeyName:
    Type: String

Mappings:
  AMI2RegionMap:
    eu-west-1: #Ireland
      '64': ami-09cd8db92c6bf3a84
    eu-west-2: #London
      '64': ami-016a20f0624bae8c5
    eu-central-1: #Frankfurt
      '64': ami-0ab1db011871746ef
    us-west-1:  #N. California
      '64': ami-05cc68a00d392447a
    us-west-2:  #Oregon
      '64': ami-0054160a688deeb6a

Resources:
  ECSHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the ECS hosts and the tasks/containers on them
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0                                                            #????????????????????????????
          ToPort: 65535
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup # Only allow inbound access to ECS from the ELB
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ECS-Hosts

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EnvironmentName

  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Fn::FindInMap:
        - AMI2RegionMap
        - Ref: AWS::Region
        - '64'
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref ECSHostSecurityGroup
      IamInstanceProfile: !Ref ECSInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup
          sudo yum install -y awslogs
          sudo systemctl start awslogsd
          sudo systemctl enable awslogsd.service

          cat > /etc/awslogs/awscli.conf << EOF
          [default]
          region = ${AWS::Region}
          [plugins]
          cwlogs = cwlogs
          EOF

          cat > /etc/awslogs/awslogs.conf << EOF
          [general]
          state_file = /var/lib/awslogs/agent-state

          [/var/log/dmesg]
          file = /var/log/dmesg
          log_stream_name = {instance_id}/var/log/dmesg
          log_group_name = ${ECSLogGroup}

          [/var/log/messages]
          datetime_format = %b %d %H:%M:%S
          file = /var/log/messages
          log_stream_name = {instance_id}/var/log/messages
          log_group_name = ${ECSLogGroup}

          [/var/log/cloud-init.log]
          datetime_format = %b %d %H:%M:%S
          file = /var/log/cloud-init.log
          log_stream_name = {instance_id}/var/log/cloud-init.log
          log_group_name = ${ECSLogGroup}

          [/var/log/cfn-init.log]
          datetime_format = %Y-%m-%d %H:%M:%S
          file = /var/log/cfn-init.log
          log_stream_name = {instance_id}/var/log/cfn-init.log
          log_group_name = ${ECSLogGroup}
          EOF

          #restart cloudwatch agent
          sudo systemctl restart awslogsd

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 7

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

  ECSAutoScalingGroup:
    DependsOn: ECSCluster
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref ECSLaunchConfiguration
      MinSize: 1
      MaxSize: 6
      DesiredCapacity: !Ref ClusterSize
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} ECS host
          PropagateAtLaunch: true
#    CreationPolicy:
#      ResourceSignal:
#        Timeout: PT15M
#    UpdatePolicy:
#      AutoScalingRollingUpdate:
#        MinInstancesInService: 1
#        MaxBatchSize: 1
#        PauseTime: PT15M
#        SuspendProcesses:
#          - HealthCheck
#          - ReplaceUnhealthy
#          - AZRebalance
#          - AlarmNotification
#          - ScheduledActions
#        WaitOnResourceSignals: 'true'

  MemoryReservationScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: '1'

  MemoryReservationHighAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Maximum
      Threshold: '75'       #!Ref ClusterMaxMemoryReservationPercentage
      AlarmDescription: Alarm if CPU too high
      Period: '60'
      AlarmActions:
      - Ref: MemoryReservationScaleUpPolicy
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value:
          Ref: ECSCluster
      ComparisonOperator: GreaterThanThreshold
      MetricName: MemoryReservation

  MemoryReservationScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: '-1'

  MemoryReservationLowAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Maximum
      Threshold: '40'       #!Ref ClusterMaxMemoryReservationPercentage
      AlarmDescription: Alarm if CPU too low
      Period: '60'
      AlarmActions:
      - Ref: MemoryReservationScaleDownPolicy
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value:
          Ref: ECSCluster
      ComparisonOperator: LessThanThreshold
      MetricName: MemoryReservation


  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                    "Service": "ec2.amazonaws.com"
                }
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: ecs-service
          PolicyDocument: |
            {
                "Statement": [{
                    "Effect": "Allow",
                    "Action": [
                        "ecs:CreateCluster",
                        "ecs:DeregisterContainerInstance",
                        "ecs:DiscoverPollEndpoint",
                        "ecs:Poll",
                        "ecs:RegisterContainerInstance",
                        "ecs:StartTelemetrySession",
                        "ecs:Submit*",
                        "ec2:Describe*",
                        "ecr:BatchCheckLayerAvailability",
                        "ecr:BatchGetImage",
                        "ecr:GetDownloadUrlForLayer",
                        "ecr:GetAuthorizationToken",
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                        "logs:DescribeLogStreams"
                    ],
                    "Resource": [
                        "arn:aws:logs:*:*:*",
                        "*"
                    ]
                }]
            }

  ECSServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Action:
            - "sts:AssumeRole"
          Effect: Allow
          Principal:
            Service:
              - application-autoscaling.amazonaws.com
      Path: /
      Policies:
        - PolicyName: ecs-service-autoscaling
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - application-autoscaling:*
                - cloudwatch:DescribeAlarms
                - cloudwatch:PutMetricAlarm
                - ecs:DescribeServices
                - ecs:UpdateService
              Resource: "*"

Outputs:
  ECSHostSecurityGroup:
    Description: A reference to the security group for ECS hosts
    Value: !Ref ECSHostSecurityGroup

  Cluster:
    Description: A reference to the ECS cluster
    Value: !GetAtt ECSCluster.Arn

  ClusterName:
    Description: A reference to the ECS cluster
    Value: !Ref ECSCluster

  ECSServiceAutoScalingRole:
    Description: A reference to ECS service auto scaling role
    Value: !GetAtt ECSServiceAutoScalingRole.Arn

  ECSAutoScalingGroupName:
    Description: A reference to ECS AutoScaling Group Name
    Value: !Ref ECSAutoScalingGroup
